/*******************************************************************************
 * Copyright 2009-2020 Exactpro (Exactpro Systems Limited)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
    id 'application'
    id 'com.palantir.docker' version '0.25.0'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'maven-publish'
    id 'signing'
}

ext {
    dockerImageVersion = release_version
    cradleVersion = '3.1.3'
    sharedDir       = file("${project.rootDir}/shared")
}

group 'com.exactpro.th2'
version release_version

repositories {
    maven {
        name 'MavenLocal'
        url sharedDir
    }
    mavenCentral()
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }
}

dependencies {
    api platform('com.exactpro.th2:bom:3.1.0-TH2-3093-1766515619-SNAPSHOT')

    implementation 'org.slf4j:slf4j-api'
    implementation 'org.slf4j:slf4j-log4j12'

    implementation group: 'net.jpountz.lz4', name: 'lz4', version: '1.3.0'

    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    implementation('com.exactpro.th2:common:3.31.0') {
        exclude group: 'com.fasterxml.jackson.core'
    }

    implementation("com.exactpro.th2:cradle-core:${cradleVersion}") {
        exclude group: 'com.fasterxml.jackson.core'
    }
    implementation ("com.exactpro.th2:cradle-cassandra:${cradleVersion}") {
        exclude group: 'com.fasterxml.jackson.core'
    }

    implementation 'com.exactpro.th2:grpc-data-provider:0.1.4'

    implementation 'io.github.microutils:kotlin-logging:1.7.10'

    implementation 'io.prometheus:simpleclient'

    implementation 'io.prometheus:simpleclient'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    implementation 'io.ktor:ktor-server-netty:1.3.1'
    implementation 'org.ehcache:ehcache:3.8.1'

    implementation 'com.rabbitmq:amqp-client'

    implementation 'io.grpc:grpc-protobuf'
    implementation 'com.google.protobuf:protobuf-java-util'

    testImplementation 'io.mockk:mockk:1.9.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.8.1"

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }
}

applicationName = 'service'

distTar {
    archiveName "${applicationName}.tar"
}

test {
    useJUnitPlatform()
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}


compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

application {
    mainClassName = "com.exactpro.th2.rptdataprovider.MainKt"
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}


// conditionals for publications
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.nexus &&
                project.hasProperty('nexus_user') &&
                project.hasProperty('nexus_password') &&
                project.hasProperty('nexus_url')) ||
                (repository == publishing.repositories.sonatype &&
                        project.hasProperty('sonatypeUsername') &&
                        project.hasProperty('sonatypePassword')) ||
                (repository == publishing.repositories.local)
    }
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signingKey') &&
            project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.whenTaskAdded {task ->
    if(task.name.equals('initializeSonatypeStagingRepository') &&
            !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = rootProject.name
                packaging = 'jar'
                description = rootProject.description
                url = vcs_url
                scm {
                    url = vcs_url
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'developer'
                        name = 'developer'
                        email = 'developer@exactpro.com'
                    }
                }
                scm {
                    url = vcs_url
                }
            }
        }
    }
    repositories {
        maven {
            name = 'local'
            url = sharedDir
        }
        //Nexus repo to publish from gitlab
        maven {
            name = 'nexus'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
