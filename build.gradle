import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.JsonReportRenderer

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    id 'application'
    id 'com.palantir.docker' version '0.25.0'
    id "org.owasp.dependencycheck" version "8.3.1"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id 'com.github.jk1.dependency-license-report' version '2.5'
    id "de.undercouch.download" version "5.4.0"
}

ext {
    dockerImageVersion = release_version
    cradleVersion       = '5.1.2-dev'
}

group 'com.exactpro.th2'
version release_version

repositories {
    mavenCentral()
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }
}


dependencies {
    api platform('com.exactpro.th2:bom:4.5.0-TH2-5035-+')

    implementation 'org.slf4j:slf4j-api'

    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    implementation group: 'net.jpountz.lz4', name: 'lz4', version: '1.3.0'

    implementation 'org.apache.commons:commons-lang3'

    implementation('com.exactpro.th2:common:5.4.0-TH2-5035-+') {
        exclude group: 'com.exactpro.th2', module: 'cradle-core'
        exclude group: 'com.exactpro.th2', module: 'cradle-cassandra'
    }
    implementation 'com.exactpro.th2:common-utils:2.2.0-TH2-5035-+'

    implementation "com.exactpro.th2:cradle-core:${cradleVersion}"

    implementation "com.exactpro.th2:cradle-cassandra:${cradleVersion}"

    implementation 'com.exactpro.th2:grpc-data-provider:0.1.8'

    implementation 'io.github.microutils:kotlin-logging:3.0.0' // The last version bases on kotlin 1.6.0

    implementation 'io.prometheus:simpleclient'

    implementation 'io.ktor:ktor-server-netty:1.6.8'
    implementation 'org.ehcache:ehcache:3.8.1'

    testImplementation('io.mockk:mockk:1.12.4') { // The last version bases on kotlin 1.6.0
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-reflect' // because we need kotlin reflect with different version
    }
    testImplementation('org.jetbrains.kotlin:kotlin-reflect') {
        because('mockk needs it')
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.10.0"

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }
}

applicationName = 'service'

distTar {
    archiveName "${applicationName}.tar"
}

test {
// FIXME: the tests were temporary disabled since they're not compatible with new api

//    useJUnitPlatform()
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}


compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

application {
    mainClassName = "com.exactpro.th2.rptdataprovider.MainKt"
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

dependencyCheck {
    formats=['SARIF', 'JSON', 'HTML']
    suppressionFile='supressions.xml'
    failBuildOnCVSS=5

    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
    }
}

licenseReport {
    def licenseNormalizerBundlePath = "$buildDir/license-normalizer-bundle.json"

    if (!file(licenseNormalizerBundlePath).exists()) {
        download.run {
            src 'https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/license-normalizer-bundle.json'
            dest "$buildDir/license-normalizer-bundle.json"
            overwrite false
        }
    }

    filters = [
            new LicenseBundleNormalizer(licenseNormalizerBundlePath, false)
    ]
    renderers = [
            new JsonReportRenderer('licenses.json', false),
    ]
    excludeOwnGroup = false
    allowedLicensesFile = new URL("https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/allowed-licenses.json")
}
